{"ast":null,"code":"var _jsxFileName = \"/Users/achintiii/chat-app/frontend/src/store/useChatStore.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useChatStore = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"useChatStore\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n/*\nimport { create } from 'zustand';\nimport toast from 'react-hot-toast';\nimport { axiosInstance } from '../lib/axios';\n\nexport const useChatStore = create((set) => ({\n    messages: [], \n    users: [],\n    selectedUser: null,\n    isUsersLoading: false,\n    isMessagesLoading: false,\n\n    getUsers: async () => {\n        set({ isUsersLoading: true });\n        try {\n            const res = await axiosInstance.get('/messages/users');\n            console.log('Fetched users:', res.data); // Debugging log\n            set({ users: res.data }); // Update users\n        } catch (error) {\n            console.error('Error fetching users:', error); // Log error\n            toast.error('Failed to fetch users');\n            set({ users: [] }); // Reset users on error\n        } finally {\n            set({ isUsersLoading: false });\n        }\n    },\n\n    getMessages: async (userId) => {\n        set({ isMessagesLoading: true });\n        try {\n            const res = await axiosInstance.get(`/messages/${userId}`);\n            console.log('Fetched messages:', res.data); // Debugging log\n            set({ messages: res.data }); // Update messages\n        } catch (error) {\n            console.error('Error fetching messages:', error); // Log error\n            toast.error('Failed to fetch messages');\n            set({ messages: [] }); // Reset messages on error\n        } finally {\n            set({ isMessagesLoading: false });\n        }\n    },\n\n    setSelectedUser: (user) => {\n        console.log('Selected user:', user); // Debugging log\n        set({ selectedUser: user });\n    },\n}));\n*/","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","useChatStore","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/achintiii/chat-app/frontend/src/store/useChatStore.js"],"sourcesContent":["import React from 'react'\n\nexport const useChatStore = () => {\n  return (\n    <div>useChatStore</div>\n  )\n}\n\n/*\nimport { create } from 'zustand';\nimport toast from 'react-hot-toast';\nimport { axiosInstance } from '../lib/axios';\n\nexport const useChatStore = create((set) => ({\n    messages: [], \n    users: [],\n    selectedUser: null,\n    isUsersLoading: false,\n    isMessagesLoading: false,\n\n    getUsers: async () => {\n        set({ isUsersLoading: true });\n        try {\n            const res = await axiosInstance.get('/messages/users');\n            console.log('Fetched users:', res.data); // Debugging log\n            set({ users: res.data }); // Update users\n        } catch (error) {\n            console.error('Error fetching users:', error); // Log error\n            toast.error('Failed to fetch users');\n            set({ users: [] }); // Reset users on error\n        } finally {\n            set({ isUsersLoading: false });\n        }\n    },\n\n    getMessages: async (userId) => {\n        set({ isMessagesLoading: true });\n        try {\n            const res = await axiosInstance.get(`/messages/${userId}`);\n            console.log('Fetched messages:', res.data); // Debugging log\n            set({ messages: res.data }); // Update messages\n        } catch (error) {\n            console.error('Error fetching messages:', error); // Log error\n            toast.error('Failed to fetch messages');\n            set({ messages: [] }); // Reset messages on error\n        } finally {\n            set({ isMessagesLoading: false });\n        }\n    },\n\n    setSelectedUser: (user) => {\n        console.log('Selected user:', user); // Debugging log\n        set({ selectedUser: user });\n    },\n}));\n*/\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,oBACED,OAAA;IAAAE,QAAA,EAAK;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}