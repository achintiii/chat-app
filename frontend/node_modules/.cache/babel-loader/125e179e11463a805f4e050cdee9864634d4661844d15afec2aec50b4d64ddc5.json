{"ast":null,"code":"import { create } from 'zustand';\nimport toast from 'react-hot-toast';\nimport { axiosInstance } from '../lib/axios';\nimport { useAuthStore } from './useAuthStore';\nexport const useChatStore = create((set, get) => ({\n  messages: [],\n  users: [],\n  selectedUser: null,\n  isUsersLoading: false,\n  isMessagesLoading: false,\n  getUsers: async () => {\n    set({\n      isUsersLoading: true\n    });\n    try {\n      const res = await axiosInstance.get('/messages/users');\n      console.log('Fetched users:', res.data); // Debugging log\n      set({\n        users: res.data\n      }); // Update users\n    } catch (error) {\n      console.error('Error fetching users:', error); // Log error\n      toast.error('Failed to fetch users');\n    } finally {\n      set({\n        isUsersLoading: false\n      });\n    }\n  },\n  getMessages: async userId => {\n    set({\n      isMessagesLoading: true\n    });\n    try {\n      const res = await axiosInstance.get(`/messages/${userId}`);\n      console.log('Fetched messages:', res.data); // Debugging log\n      set({\n        messages: res.data\n      }); // Update messages\n    } catch (error) {\n      console.error('Error fetching messages:', error); // Log error\n      toast.error('Failed to fetch messages');\n    } finally {\n      set({\n        isMessagesLoading: false\n      });\n    }\n  },\n  setSelectedUser: selectedUser => {\n    set({\n      selectedUser\n    });\n  },\n  subscribeToMessages: () => {\n    const {\n      selectedUser\n    } = get();\n    if (!selectedUser) return;\n    const socket = useAuthStore.getState().socket;\n    socket.on(\"newMessage\", newMessage => {\n      set({\n        messages: [...get().messages, newMessage]\n      });\n    });\n  },\n  unsubscribeFromMessages: () => {\n    const socket = useAuthStore.getState().socket;\n    socket.off(\"newMessage\");\n  },\n  sendMessage: async messageData => {\n    const {\n      selectedUser,\n      messages\n    } = get();\n    try {\n      const res = await axiosInstance.post(`/messages/send/${selectedUser._id}`, messageData);\n      console.log('Sent message:', res.data); // Debugging log\n      set({\n        messages: [...messages, res.data]\n      }); // Update messages\n    } catch (error) {\n      console.error('Error sending message:', error); // Log error\n      toast.error('Failed to send message');\n    }\n  }\n}));","map":{"version":3,"names":["create","toast","axiosInstance","useAuthStore","useChatStore","set","get","messages","users","selectedUser","isUsersLoading","isMessagesLoading","getUsers","res","console","log","data","error","getMessages","userId","setSelectedUser","subscribeToMessages","socket","getState","on","newMessage","unsubscribeFromMessages","off","sendMessage","messageData","post","_id"],"sources":["/Users/achintiii/chat-app/frontend/src/store/useChatStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport toast from 'react-hot-toast';\nimport { axiosInstance } from '../lib/axios';\nimport { useAuthStore } from './useAuthStore';\n\nexport const useChatStore = create((set, get) => ({\n    messages: [], \n    users: [],\n    selectedUser: null,\n    isUsersLoading: false,\n    isMessagesLoading: false,\n\n    getUsers: async () => {\n        set({ isUsersLoading: true });\n        try {\n            const res = await axiosInstance.get('/messages/users');\n            console.log('Fetched users:', res.data); // Debugging log\n            set({ users: res.data }); // Update users\n        } catch (error) {\n            console.error('Error fetching users:', error); // Log error\n            toast.error('Failed to fetch users');\n        } finally {\n            set({ isUsersLoading: false });\n        }\n    },\n\n    getMessages: async (userId) => {\n        set({ isMessagesLoading: true });\n        try {\n            const res = await axiosInstance.get(`/messages/${userId}`);\n            console.log('Fetched messages:', res.data); // Debugging log\n            set({ messages: res.data }); // Update messages\n        } catch (error) {\n            console.error('Error fetching messages:', error); // Log error\n            toast.error('Failed to fetch messages');\n            \n        } finally {\n            set({ isMessagesLoading: false });\n        }\n    },\n\n    setSelectedUser: (selectedUser) => {\n        set({ selectedUser });\n        \n    },\n    subscribeToMessages: () => {\n        const {selectedUser} = get()\n        if (!selectedUser) return;\n\n        const socket = useAuthStore.getState().socket;\n\n        socket.on(\"newMessage\", (newMessage) => {\n            set({ messages: [...get().messages, newMessage] });\n        });\n    },\n    unsubscribeFromMessages: () => {\n        const socket = useAuthStore.getState().socket;\n        socket.off(\"newMessage\");\n    },\n\n\n    sendMessage: async (messageData) => {\n        const {selectedUser, messages} = get();\n        try {\n            const res = await axiosInstance.post(`/messages/send/${selectedUser._id}`, messageData);\n            console.log('Sent message:', res.data); // Debugging log\n            set({ messages: [...messages, res.data] }); // Update messages\n        }\n        catch (error) {\n            console.error('Error sending message:', error); // Log error\n            toast.error('Failed to send message');\n        }\n    },\n\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}