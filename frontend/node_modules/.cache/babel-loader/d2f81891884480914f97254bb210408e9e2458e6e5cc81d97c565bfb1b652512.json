{"ast":null,"code":"import{create}from'zustand';import toast from'react-hot-toast';import{axiosInstance}from'../lib/axios';import{useAuthStore}from'./useAuthStore';export const useChatStore=create((set,get)=>({messages:[],users:[],selectedUser:null,isUsersLoading:false,isMessagesLoading:false,getUsers:async()=>{set({isUsersLoading:true});try{const res=await axiosInstance.get('/messages/users');console.log('Fetched users:',res.data);// Debugging log\nset({users:res.data});// Update users\n}catch(error){console.error('Error fetching users:',error);// Log error\ntoast.error('Failed to fetch users');}finally{set({isUsersLoading:false});}},getMessages:async userId=>{set({isMessagesLoading:true});try{const res=await axiosInstance.get(\"/messages/\".concat(userId));console.log('Fetched messages:',res.data);// Debugging log\nset({messages:res.data});// Update messages\n}catch(error){console.error('Error fetching messages:',error);// Log error\ntoast.error('Failed to fetch messages');}finally{set({isMessagesLoading:false});}},subscribeToMessages:()=>{const{selectedUser}=get();if(!selectedUser)return;const socket=useAuthStore.getState().socket;socket.on(\"newMessage\",newMessage=>{const isMessageSentFromSelectedUser=newMessage.senderId===selectedUser._id;if(!isMessageSentFromSelectedUser)return;set({messages:[...get().messages,newMessage]});});},unsubscribeFromMessages:()=>{const socket=useAuthStore.getState().socket;socket.off(\"newMessage\");},sendMessage:async messageData=>{const{selectedUser,messages}=get();try{const res=await axiosInstance.post(\"/messages/send/\".concat(selectedUser._id),messageData);set({messages:[...messages,res.data]});// Update messages\n}catch(error){console.error('Error sending message:',error);// Log error\ntoast.error('Failed to send message');}},setSelectedUser:selectedUser=>set({selectedUser})}));","map":{"version":3,"names":["create","toast","axiosInstance","useAuthStore","useChatStore","set","get","messages","users","selectedUser","isUsersLoading","isMessagesLoading","getUsers","res","console","log","data","error","getMessages","userId","concat","subscribeToMessages","socket","getState","on","newMessage","isMessageSentFromSelectedUser","senderId","_id","unsubscribeFromMessages","off","sendMessage","messageData","post","setSelectedUser"],"sources":["/Users/achintiii/chat-app/frontend/src/store/useChatStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport toast from 'react-hot-toast';\nimport { axiosInstance } from '../lib/axios';\nimport { useAuthStore } from './useAuthStore';\n\nexport const useChatStore = create((set, get) => ({\n    messages: [], \n    users: [],\n    selectedUser: null,\n    isUsersLoading: false,\n    isMessagesLoading: false,\n\n    getUsers: async () => {\n        set({ isUsersLoading: true });\n        try {\n            const res = await axiosInstance.get('/messages/users');\n            console.log('Fetched users:', res.data); // Debugging log\n            set({ users: res.data }); // Update users\n        } catch (error) {\n            console.error('Error fetching users:', error); // Log error\n            toast.error('Failed to fetch users');\n        } finally {\n            set({ isUsersLoading: false });\n        }\n    },\n\n    getMessages: async (userId) => {\n        set({ isMessagesLoading: true });\n        try {\n            const res = await axiosInstance.get(`/messages/${userId}`);\n            console.log('Fetched messages:', res.data); // Debugging log\n            set({ messages: res.data }); // Update messages\n        } catch (error) {\n            console.error('Error fetching messages:', error); // Log error\n            toast.error('Failed to fetch messages');\n            \n        } finally {\n            set({ isMessagesLoading: false });\n        }\n    },\n\n    \n    subscribeToMessages: () => {\n        const {selectedUser} = get()\n        if (!selectedUser) return;\n\n        const socket = useAuthStore.getState().socket;\n\n        socket.on(\"newMessage\", (newMessage) => {\n            const isMessageSentFromSelectedUser = newMessage.senderId === selectedUser._id;\n            if (!isMessageSentFromSelectedUser) return;\n            set({ messages: [...get().messages, newMessage] });\n        });\n    },\n    unsubscribeFromMessages: () => {\n        const socket = useAuthStore.getState().socket;\n        socket.off(\"newMessage\");\n    },\n\n\n    sendMessage: async (messageData) => {\n        const {selectedUser, messages} = get();\n        try {\n            const res = await axiosInstance.post(`/messages/send/${selectedUser._id}`, messageData);\n            set({ messages: [...messages, res.data] }); // Update messages\n        }\n        catch (error) {\n            console.error('Error sending message:', error); // Log error\n            toast.error('Failed to send message');\n        }\n    },\n    setSelectedUser: (selectedUser) => \n        set({ selectedUser }),\n        \n\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}