{"ast":null,"code":"export const useAuthStore = create(set => ({\n  authUser: null,\n  isSigningUp: false,\n  isLoggingIn: false,\n  isUpdatingProfile: false,\n  isCheckingAuth: true,\n  // Check authentication status\n  checkAuth: async () => {\n    set({\n      isCheckingAuth: true\n    });\n    try {\n      const response = await axiosInstance.get(\"http://localhost:5001/api/auth/check\");\n      set({\n        authUser: response.data\n      });\n    } catch (error) {\n      console.error(error);\n      set({\n        authUser: null\n      });\n    } finally {\n      set({\n        isCheckingAuth: false\n      });\n    }\n  },\n  // Signup function\n  signup: async formData => {\n    set({\n      isSigningUp: true\n    });\n    try {\n      const res = await axiosInstance.post(\"http://localhost:5001/api/auth/signup\", formData);\n      toast.success(\"Account created successfully!\");\n      set({\n        authUser: res.data\n      });\n    } catch (error) {\n      console.error(\"Error during signup:\", error);\n      toast.error(\"Error during signup\");\n    } finally {\n      set({\n        isSigningUp: false\n      });\n    }\n  },\n  // Login function\n  login: async formData => {\n    set({\n      isLoggingIn: true\n    });\n    try {\n      const res = await axiosInstance.post(\"http://localhost:5001/api/auth/login\", formData);\n      set({\n        authUser: res.data\n      });\n      toast.success(\"Logged in successfully!\");\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      toast.error(\"Invalid email or password. Please try again.\");\n    } finally {\n      set({\n        isLoggingIn: false\n      });\n    }\n  },\n  // Logout function\n  logout: async () => {\n    try {\n      await axiosInstance.post(\"http://localhost:5001/api/auth/logout\");\n      set({\n        authUser: null\n      });\n      toast.success(\"Logged out successfully!\");\n    } catch (error) {\n      console.error(\"Error during logout:\", error);\n      toast.error(\"Error during logout\");\n    }\n  },\n  // Update profile\n  updateProfile: async data => {\n    set({\n      isUpdatingProfile: true\n    });\n    try {\n      const res = await axiosInstance.put(\"http://localhost:5001/api/auth/update\", data);\n      set({\n        authUser: res.data\n      });\n      toast.success(\"Profile updated successfully\");\n      await useAuthStore.getState().checkAuth(); // Re-fetch updated user data\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      toast.error(\"Error updating profile\");\n    } finally {\n      set({\n        isUpdatingProfile: false\n      });\n    }\n  }\n}));","map":{"version":3,"names":["useAuthStore","create","set","authUser","isSigningUp","isLoggingIn","isUpdatingProfile","isCheckingAuth","checkAuth","response","axiosInstance","get","data","error","console","signup","formData","res","post","toast","success","login","logout","updateProfile","put","getState"],"sources":["/Users/achintiii/chat-app/frontend/src/store/useAuthStore.js"],"sourcesContent":["export const useAuthStore = create((set) => ({\n    authUser: null,\n    isSigningUp: false,\n    isLoggingIn: false,\n    isUpdatingProfile: false,\n    isCheckingAuth: true,\n\n    // Check authentication status\n    checkAuth: async () => {\n        set({ isCheckingAuth: true });\n        try {\n            const response = await axiosInstance.get(\"http://localhost:5001/api/auth/check\");\n            set({ authUser: response.data });\n        } catch (error) {\n            console.error(error);\n            set({ authUser: null });\n        } finally {\n            set({ isCheckingAuth: false });\n        }\n    },\n\n    // Signup function\n    signup: async (formData) => {\n        set({ isSigningUp: true });\n        try {\n            const res = await axiosInstance.post(\"http://localhost:5001/api/auth/signup\", formData);\n            toast.success(\"Account created successfully!\");\n            set({ authUser: res.data });\n        } catch (error) {\n            console.error(\"Error during signup:\", error);\n            toast.error(\"Error during signup\");\n        } finally {\n            set({ isSigningUp: false });\n        }\n    },\n\n    // Login function\n    login: async (formData) => {\n        set({ isLoggingIn: true });\n        try {\n            const res = await axiosInstance.post(\"http://localhost:5001/api/auth/login\", formData);\n            set({ authUser: res.data });\n            toast.success(\"Logged in successfully!\");\n        } catch (error) {\n            console.error(\"Error during login:\", error);\n            toast.error(\"Invalid email or password. Please try again.\");\n        } finally {\n            set({ isLoggingIn: false });\n        }\n    },\n\n    // Logout function\n    logout: async () => {\n        try {\n            await axiosInstance.post(\"http://localhost:5001/api/auth/logout\");\n            set({ authUser: null });\n            toast.success(\"Logged out successfully!\");\n        } catch (error) {\n            console.error(\"Error during logout:\", error);\n            toast.error(\"Error during logout\");\n        }\n    },\n\n    // Update profile\n    updateProfile: async (data) => {\n        set({ isUpdatingProfile: true });\n        try {\n            const res = await axiosInstance.put(\"http://localhost:5001/api/auth/update\", data);\n            set({ authUser: res.data });\n            toast.success(\"Profile updated successfully\");\n            await useAuthStore.getState().checkAuth(); // Re-fetch updated user data\n        } catch (error) {\n            console.error(\"Error updating profile:\", error);\n            toast.error(\"Error updating profile\");\n        } finally {\n            set({ isUpdatingProfile: false });\n        }\n    },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}