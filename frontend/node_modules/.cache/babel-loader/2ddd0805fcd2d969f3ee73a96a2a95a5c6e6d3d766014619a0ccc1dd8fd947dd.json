{"ast":null,"code":"import { create } from 'zustand';\nimport toast from 'react-hot-toast';\nimport { axiosInstance } from '../lib/axios';\nexport const useChatStore = create(set => ({\n  messages: [],\n  users: [],\n  selectedUser: null,\n  isUsersLoading: false,\n  isMessagesLoading: false,\n  getUsers: async () => {\n    set({\n      isUsersLoading: true\n    });\n    try {\n      const res = await axiosInstance.get('/messages/users');\n      set({\n        users: res.data\n      });\n    } catch (error) {\n      toast.error('Failed to fetch users');\n    }\n    set({\n      isUsersLoading: false\n    });\n  },\n  getMessages: async userId => {\n    set({\n      isMessagesLoading: true\n    });\n    try {\n      const res = await axiosInstance.get(`/messages/${userId}`);\n      set({\n        messages: res.data\n      });\n    } catch (error) {\n      toast.error('Failed to fetch messages');\n    } finally {\n      set({\n        isMessagesLoading: false\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","toast","axiosInstance","useChatStore","set","messages","users","selectedUser","isUsersLoading","isMessagesLoading","getUsers","res","get","data","error","getMessages","userId"],"sources":["/Users/achintiii/chat-app/frontend/src/store/useChatStore.js"],"sourcesContent":["import {create} from 'zustand';\nimport toast from 'react-hot-toast';\nimport {axiosInstance} from '../lib/axios';\n\n\nexport const useChatStore = create((set) => ({\n    messages: [], \n    users: [],\n    selectedUser: null,\n    isUsersLoading: false,\n    isMessagesLoading: false,\n\n\n    getUsers: async () => {\n        set({isUsersLoading: true});\n        try {\n            const res = await axiosInstance.get('/messages/users');\n            set({users: res.data});\n        } catch (error) {\n            toast.error('Failed to fetch users');\n        }\n        set({isUsersLoading: false});\n    },\n    getMessages: async(userId) => {\n        set({isMessagesLoading: true});\n        try {\n            const res = await axiosInstance.get(`/messages/${userId}`);\n            set({messages: res.data});\n        } catch (error) {\n            toast.error('Failed to fetch messages');\n        }\n        finally {\n            set({isMessagesLoading: false});\n        }\n        \n    },\n}));\n\n"],"mappings":"AAAA,SAAQA,MAAM,QAAO,SAAS;AAC9B,OAAOC,KAAK,MAAM,iBAAiB;AACnC,SAAQC,aAAa,QAAO,cAAc;AAG1C,OAAO,MAAMC,YAAY,GAAGH,MAAM,CAAEI,GAAG,KAAM;EACzCC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE,IAAI;EAClBC,cAAc,EAAE,KAAK;EACrBC,iBAAiB,EAAE,KAAK;EAGxBC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IAClBN,GAAG,CAAC;MAACI,cAAc,EAAE;IAAI,CAAC,CAAC;IAC3B,IAAI;MACA,MAAMG,GAAG,GAAG,MAAMT,aAAa,CAACU,GAAG,CAAC,iBAAiB,CAAC;MACtDR,GAAG,CAAC;QAACE,KAAK,EAAEK,GAAG,CAACE;MAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZb,KAAK,CAACa,KAAK,CAAC,uBAAuB,CAAC;IACxC;IACAV,GAAG,CAAC;MAACI,cAAc,EAAE;IAAK,CAAC,CAAC;EAChC,CAAC;EACDO,WAAW,EAAE,MAAMC,MAAM,IAAK;IAC1BZ,GAAG,CAAC;MAACK,iBAAiB,EAAE;IAAI,CAAC,CAAC;IAC9B,IAAI;MACA,MAAME,GAAG,GAAG,MAAMT,aAAa,CAACU,GAAG,CAAC,aAAaI,MAAM,EAAE,CAAC;MAC1DZ,GAAG,CAAC;QAACC,QAAQ,EAAEM,GAAG,CAACE;MAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZb,KAAK,CAACa,KAAK,CAAC,0BAA0B,CAAC;IAC3C,CAAC,SACO;MACJV,GAAG,CAAC;QAACK,iBAAiB,EAAE;MAAK,CAAC,CAAC;IACnC;EAEJ;AACJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}